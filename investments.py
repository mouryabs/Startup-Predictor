# -*- coding: utf-8 -*-
"""Investments.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166jNQNjR4EF6A_3WV1ZZIoReRoQeoBto
"""

from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import SelectFpr,chi2
from sklearn import tree
from sklearn.metrics import cohen_kappa_score

import pickle
import pandas as pd

data = pd.read_csv('investments.csv')
print(data.shape)
data.head()

data['permalink'] = data['permalink'].astype('category')
data['permalink'] = data['permalink'] .cat.codes
#del data['permalink']

data['name'] = data['name'].astype('category')
data['name'] = data['name'] .cat.codes

data['homepage_url'] = data['homepage_url'].astype('category')
data['homepage_url'] = data['homepage_url'] .cat.codes
#del data['homepage_url']

data['category_list'] = data['category_list'].astype('category')
data['category_list'] = data['category_list'] .cat.codes

data[' market '] = data[' market '].astype('category')
data[' market '] = data[' market '] .cat.codes

data[' funding_total_usd '] = data[' funding_total_usd '].astype('category')
data[' funding_total_usd '] = data[' funding_total_usd '] .cat.codes

data['country_code'] = data['country_code'].astype('category')
data['country_code'] = data['country_code'] .cat.codes

data['state_code'] = data['state_code'].astype('category')
data['state_code'] = data['state_code'] .cat.codes

data['region'] = data['region'].astype('category')
data['region'] = data['region'] .cat.codes

data['city'] = data['city'].astype('category')
data['city'] = data['city'] .cat.codes

data['founded_at'] = data['founded_at'].astype('category')
data['founded_at'] = data['founded_at'] .cat.codes

data['founded_month'] = data['founded_month'].astype('category')
data['founded_month'] = data['founded_month'] .cat.codes

data['founded_quarter'] = data['founded_quarter'].astype('category')
data['founded_quarter'] = data['founded_quarter'] .cat.codes

data['first_funding_at'] = data['first_funding_at'].astype('category')
data['first_funding_at'] = data['first_funding_at'] .cat.codes

data['last_funding_at'] = data['last_funding_at'].astype('category')
data['last_funding_at'] = data['last_funding_at'] .cat.codes

data['Is Funded or Not?'] = data['Is Funded or Not?'].astype('category')
data['Is Funded or Not?'] = data['Is Funded or Not?'] .cat.codes
#del data['Is Funded or Not?']

data.dropna()

data = data[~data['status'].isnull()]
data = data[~data['founded_year'].isnull()]
data = data[~data['Unnamed: 19'].isnull()]

X = data.drop('status', 1)
y = pd.DataFrame(data['status'])

#X = SelectKBest(chi2, k=2).fit_transform(X, y)
#sel = VarianceThreshold(threshold=(.8* (1 - .8)))
#sel.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=10)
svc = SVC()
mlp = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(10,), random_state=1)
logreg = LogisticRegression(C=1e5)
des = tree.DecisionTreeClassifier()

logreg.fit(X_train, y_train)
mlp.fit(X_train, y_train)
svc.fit(X_train, y_train)
des.fit(X_train, y_train)

y1_pred = mlp.predict(X_test)
y2_pred = svc.predict(X_test)
y3_pred = logreg.predict(X_test) 
y4_pred = des.predict(X_test)

svc.score(X_test, y_test)

mlp.score(X_test, y_test)

logreg.score(X_test, y_test)

des.score(X_test, y_test)

mlp.score(X_train, y_train)

svc.score(X_train, y_train)

logreg.score(X_train, y_train)

des.score(X_train, y_train)

print("MLP Accuracy : ", mlp.score(X, y))

print("SVC Accuracy : ", svc.score(X, y))

print("Logistic Regression Accuracy : ", logreg.score(X, y))

print("Decision Tree Accuracy : ", des.score(X, y))

print ("mlp")
    print(f1_score(y_test, y1_pred, average="macro"))
    print(precision_score(y_test, y1_pred, average="macro"))
    print(recall_score(y_test, y1_pred, average="macro"))
    print(cohen_kappa_score(y_test, y1_pred))

print ("svc")
    print(f1_score(y_test, y2_pred, average="macro"))
    print(precision_score(y_test, y2_pred, average="macro"))
    print(recall_score(y_test, y2_pred, average="macro"))
    print(cohen_kappa_score(y_test, y2_pred))

print ("logreg")
    print(f1_score(y_test, y3_pred, average="macro"))
    print(precision_score(y_test, y3_pred, average="macro"))
    print(recall_score(y_test, y3_pred, average="macro"))
    print(cohen_kappa_score(y_test, y3_pred))

print ("des")
    print(f1_score(y_test, y4_pred, average="macro"))
    print(precision_score(y_test, y4_pred, average="macro"))
    print(recall_score(y_test, y4_pred, average="macro"))
    print(cohen_kappa_score(y_test, y4_pred))